version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: apply-copilot-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-apply_copilot}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-apply_copilot}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - apply-copilot

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: apply-copilot-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - apply-copilot

  # MinIO S3-compatible Storage
  minio:
    image: minio/minio:latest
    container_name: apply-copilot-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped
    networks:
      - apply-copilot

  # MinIO Bucket Creation
  minio-createbucket:
    image: minio/mc:latest
    container_name: apply-copilot-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-apply-copilot}
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 $$MINIO_ROOT_USER $$MINIO_ROOT_PASSWORD;
      mc mb minio/$$MINIO_BUCKET_NAME --ignore-existing;
      mc anonymous set public minio/$$MINIO_BUCKET_NAME;
      echo 'MinIO bucket $$MINIO_BUCKET_NAME created successfully';
      "
    networks:
      - apply-copilot

  # API Backend (optional - for development)
  api:
    build:
      context: ../apps/api
      dockerfile: Dockerfile
    container_name: apply-copilot-api
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-apply_copilot}
      REDIS_URL: redis://redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-apply-copilot}
      MINIO_SECURE: "false"
      API_HOST: 0.0.0.0
      API_PORT: 8000
      COMPANION_TOKEN: ${COMPANION_TOKEN}
      SECRET_KEY: ${SECRET_KEY}
      LLM_PROVIDER: ${LLM_PROVIDER:-none}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY:-}
      DEEPSEEK_NVIDIA_API_KEY: ${DEEPSEEK_NVIDIA_API_KEY:-}
      DEBUG: ${DEBUG:-false}
      ENABLE_DEBUG_LOGGING: ${ENABLE_DEBUG_LOGGING:-false}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ../apps/api:/app
      - api_artifacts:/app/artifacts
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - apply-copilot
    profiles:
      - api  # Only start with --profile api

  # Mock ATS Server (for testing)
  mock-ats:
    build:
      context: ../apps/mock-ats
      dockerfile: Dockerfile
    container_name: apply-copilot-mock-ats
    ports:
      - "3000:3000"
    volumes:
      - ../apps/mock-ats:/app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - apply-copilot
    profiles:
      - mock-ats  # Only start with --profile mock-ats

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  api_artifacts:
    driver: local

networks:
  apply-copilot:
    driver: bridge
    name: apply-copilot-network