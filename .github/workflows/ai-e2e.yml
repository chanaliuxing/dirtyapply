# Apply-Copilot AI-Driven E2E Testing
# Automated testing with Claude Code following TDD methodology

name: AI Real-World Tests

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: true
        default: 'full'
        type: choice
        options:
        - unit
        - integration
        - e2e
        - full

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'
  PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/ms-playwright

jobs:
  # Unit and Integration Tests
  test-foundation:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: apply_copilot_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Python dependencies
        run: |
          pip install --upgrade pip
          cd apps/api && pip install -r requirements.txt
          cd ../companion && pip install -r requirements.txt
          pip install pytest-cov pytest-xdist
      
      - name: 🔧 Setup test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/apply_copilot_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379/0" >> .env.test
          echo "COMPANION_TOKEN=test-token-1234567890123456789012345678901234" >> .env.test
          echo "SECRET_KEY=test-secret-key-1234567890123456789012345678901234" >> .env.test
          echo "LLM_PROVIDER=none" >> .env.test
          echo "DEBUG=true" >> .env.test
          mv .env.test .env
      
      - name: 🧪 Run unit tests
        run: |
          cd apps/api && python -m pytest --maxfail=1 -q -m "not integration and not e2e" --cov=app --cov-report=xml
          cd ../companion && python -m pytest --maxfail=1 -q -m "not integration and not e2e"
      
      - name: 🔗 Run integration tests
        run: |
          cd apps/api && python -m pytest --maxfail=1 -q -m "integration"
          cd ../companion && python -m pytest --maxfail=1 -q -m "integration"
      
      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/api/coverage.xml
          flags: unittests
          name: codecov-umbrella
  
  # E2E Tests with Playwright
  test-e2e:
    runs-on: ubuntu-latest
    needs: test-foundation
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install dependencies
        run: |
          npm install -g pnpm
          pnpm install
          cd apps/api && pip install -r requirements.txt
          cd ../companion && pip install -r requirements.txt
          cd ../e2e && pnpm install
      
      - name: 🎭 Install Playwright browsers
        run: |
          cd apps/e2e && npx playwright install --with-deps
      
      - name: 🔧 Setup test environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=sqlite:///test.db" >> .env
          echo "COMPANION_TOKEN=test-token-1234567890123456789012345678901234" >> .env
          echo "SECRET_KEY=test-secret-key-1234567890123456789012345678901234" >> .env
          echo "LLM_PROVIDER=none" >> .env
          echo "DEBUG=true" >> .env
      
      - name: 🏗️ Build applications
        run: |
          make build
      
      - name: 🚀 Start services
        run: |
          make up
          sleep 10
      
      - name: 🧪 Run E2E tests
        run: |
          cd apps/e2e && npx playwright test --reporter=list
      
      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-results
          path: apps/e2e/test-results/
      
      - name: 📸 Upload E2E screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-screenshots
          path: apps/e2e/test-results/
      
      - name: 📋 Upload E2E report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: apps/e2e/playwright-report/

  # AI-Driven Testing with Claude Code
  ai-testing:
    runs-on: ubuntu-latest
    needs: [test-foundation, test-e2e]
    if: github.event_name == 'pull_request' || github.event.inputs.test_level == 'full'
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
      
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 🤖 Install Claude Code
        run: |
          npm install -g @anthropic-ai/claude-code
      
      - name: 📦 Install dependencies
        run: |
          npm install -g pnpm
          make install
      
      - name: 🔧 Setup AI test environment
        run: |
          cp .env.example .env
          echo "DATABASE_URL=sqlite:///ai_test.db" >> .env
          echo "COMPANION_TOKEN=ai-test-token-1234567890123456789012345678901234" >> .env
          echo "SECRET_KEY=ai-test-secret-key-1234567890123456789012345678901234" >> .env
          echo "LLM_PROVIDER=none" >> .env
          echo "DEBUG=true" >> .env
          echo "DISABLE_AUTH=true" >> .env  # Only for CI testing
      
      - name: 🤖 Run AI-driven test automation
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          chmod +x bin/ai-test.sh
          timeout 1800 bash bin/ai-test.sh || {
            echo "⚠️ AI testing completed with issues or timeout"
            echo "Check logs for details"
            exit 1
          }
      
      - name: 📋 Upload AI test logs
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: ai-test-logs
          path: ai-test-*.log
      
      - name: 📊 Create test summary
        if: always()
        run: |
          echo "## 🤖 AI-Driven Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if grep -q "ALL GREEN" ai-test-*.log 2>/dev/null; then
            echo "✅ **SUCCESS**: All tests passed with AI automation" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **ATTENTION**: AI automation needs review" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Coverage:" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- Integration Tests: ✅" >> $GITHUB_STEP_SUMMARY  
          echo "- E2E Tests: ✅" >> $GITHUB_STEP_SUMMARY
          echo "- AI Validation: $([ -f ai-test-*.log ] && echo '✅' || echo '⚠️')" >> $GITHUB_STEP_SUMMARY

  # Security and Quality Gate
  quality-gate:
    runs-on: ubuntu-latest
    needs: [test-foundation, test-e2e, ai-testing]
    if: always()
    
    steps:
      - name: 🔄 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔒 Security scan
        run: |
          # Check for hard-coded secrets
          echo "Scanning for hard-coded secrets..."
          if grep -r "sk-[a-zA-Z0-9]" --include="*.py" --include="*.js" --include="*.ts" --exclude-dir=node_modules apps/ packages/ || \
             grep -r "nvapi-[a-zA-Z0-9]" --include="*.py" --include="*.js" --include="*.ts" --exclude-dir=node_modules apps/ packages/ || \
             grep -r "bearer.*[a-zA-Z0-9]" --include="*.py" --include="*.js" --include="*.ts" --exclude-dir=node_modules apps/ packages/; then
            echo "❌ Hard-coded secrets detected!"
            exit 1
          fi
          echo "✅ No hard-coded secrets found"
      
      - name: 📊 Quality gate summary
        run: |
          echo "## 🎯 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.test-foundation.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.test-foundation.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.test-e2e.result == 'success' && '✅ Pass' || '❌ Fail' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| AI Validation | ${{ needs.ai-testing.result == 'success' && '✅ Pass' || '⚠️ Review' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ✅ Pass |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test-foundation.result }}" == "success" && "${{ needs.test-e2e.result }}" == "success" ]]; then
            echo "🎉 **Quality gate PASSED** - Ready for merge!" >> $GITHUB_STEP_SUMMARY
          else
            echo "🚫 **Quality gate FAILED** - Review required" >> $GITHUB_STEP_SUMMARY
          fi